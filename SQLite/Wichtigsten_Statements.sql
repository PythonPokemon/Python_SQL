
-- strg + k + c  auskommentieren
-- strg + k + u  einkommentieren

------------------------------------------------------------
-- 1Ô∏è‚É£  TABELLE ERSTELLEN
-- Erstellt eine neue Tabelle mit Spalten und Datentypen.
------------------------------------------------------------
CREATE TABLE personen (
    id INTEGER PRIMARY KEY AUTOINCREMENT,   -- Eindeutige ID (automatisch hochz√§hlend)
    vorname TEXT NOT NULL,                  -- Textspalte, darf nicht leer sein
    nachname TEXT NOT NULL,
    geburtsdatum DATE,                      -- Datumsspalte
    einkommen REAL                          -- Zahl mit Nachkommastellen
);


------------------------------------------------------------
-- 2Ô∏è‚É£  DATENS√ÑTZE EINF√úGEN
-- F√ºgt neue Zeilen in eine Tabelle ein.
------------------------------------------------------------
INSERT INTO personen (vorname, nachname, geburtsdatum, einkomme)
VALUES ('Max', 'Mustermann', '1980-01-15', 3200);

INSERT INTO personen (vorname, nachname, geburtsdatum, einkomme)
VALUES ('Erika', 'Musterfrau', '1990-05-30', 4100);

INSERT INTO personen (vorname, nachname, geburtsdatum, einkomme)
VALUES ('Hans', 'Schmidt', '1975-09-20', 2700);

INSERT INTO personen (vorname, nachname, geburtsdatum, einkomme)
VALUES ('Lisa', 'Schmidt', '1988-03-11', 2800);

------------------------------------------------------------
-- 3Ô∏è‚É£  ALLE DATENS√ÑTZE ANZEIGEN
-- Gibt alle Spalten und Zeilen der Tabelle aus.
------------------------------------------------------------
SELECT * FROM personen;


------------------------------------------------------------
-- 4Ô∏è‚É£  BESTIMMTE SPALTEN AUSGEBEN
-- Gibt nur ausgew√§hlte Spalten aus.
------------------------------------------------------------
SELECT vorname, nachname FROM personen;


------------------------------------------------------------
-- 5Ô∏è‚É£  BEDINGTE ABFRAGEN
-- Mit WHERE werden nur bestimmte Datens√§tze angezeigt.
------------------------------------------------------------
SELECT * FROM personen WHERE nachname = 'Schmidt';

SELECT * FROM personen WHERE geburtsdatum > '1985-01-01';


------------------------------------------------------------
-- 6Ô∏è‚É£  DATENS√ÑTZE SORTIEREN
-- Mit ORDER BY kann man auf- oder absteigend sortieren.
------------------------------------------------------------
SELECT * FROM personen ORDER BY nachname ASC;   -- aufsteigend
SELECT * FROM personen ORDER BY geburtsdatum DESC;  -- absteigend


------------------------------------------------------------
-- 7Ô∏è‚É£  DATENS√ÑTZE AKTUALISIEREN
-- √Ñndert bestehende Werte in einer Tabelle.
------------------------------------------------------------
UPDATE personen
SET nachname = 'M√ºller'
WHERE id = 3;    -- nur der Datensatz mit ID 3 wird ge√§ndert


------------------------------------------------------------
-- 8Ô∏è‚É£  DATENS√ÑTZE L√ñSCHEN
-- Entfernt bestimmte Zeilen.
------------------------------------------------------------
DELETE FROM personen WHERE id = 2;    -- l√∂scht nur Erika Musterfrau


------------------------------------------------------------
-- 9Ô∏è‚É£  ALLE DATENS√ÑTZE L√ñSCHEN (aber Tabelle bleibt!)
------------------------------------------------------------
DELETE FROM personen;


------------------------------------------------------------
-- üîü  TABELLE L√ñSCHEN
-- Entfernt die gesamte Tabelle (Achtung: alle Daten weg!)
------------------------------------------------------------
DROP TABLE personen;


------------------------------------------------------------
-- 1Ô∏è‚É£1Ô∏è‚É£  AGGREGATFUNKTIONEN
-- Diese berechnen Werte √ºber mehrere Zeilen hinweg.
------------------------------------------------------------
SELECT COUNT(*) FROM personen;          -- z√§hlt alle Personen
SELECT MIN(geburtsdatum) FROM personen; -- √§lteste Person
SELECT MAX(geburtsdatum) FROM personen; -- j√ºngste Person


------------------------------------------------------------
-- 1Ô∏è‚É£2Ô∏è‚É£  GRUPPIEREN MIT GROUP BY
-- Gruppiert Daten und wendet Aggregatfunktionen auf Gruppen an.
------------------------------------------------------------
-- Beispiel: Wie viele Personen pro Nachname?
SELECT nachname, COUNT(*) 
FROM personen
GROUP BY nachname;


------------------------------------------------------------
-- 1Ô∏è‚É£3Ô∏è‚É£  SUCHEN MIT LIKE
-- Findet Eintr√§ge mit √§hnlichen Werten (Textsuche).
------------------------------------------------------------
SELECT * FROM personen WHERE vorname LIKE 'Eri%';  -- beginnt mit 'Eri'
SELECT * FROM personen WHERE nachname LIKE '%mann'; -- endet mit 'mann'


------------------------------------------------------------
-- 1Ô∏è‚É£4Ô∏è‚É£  TABELLEN VERBINDEN (JOIN)
-- Holt Daten aus mehreren Tabellen gleichzeitig.
------------------------------------------------------------
-- Beispiel: Tabellen 'personen' und 'adressen'
CREATE TABLE adressen (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    person_id INTEGER,
    stadt TEXT,
    plz TEXT
);

-- Beispiel-Daten
INSERT INTO adressen (person_id, stadt, plz) VALUES (1, 'Berlin', '10115');
INSERT INTO adressen (person_id, stadt, plz) VALUES (2, 'Hamburg', '20095');
INSERT INTO adressen (person_id, stadt, plz) VALUES (3, 'M√ºnchen', '80331');

-- INNER JOIN: verbindet Datens√§tze mit gleicher ID
SELECT personen.vorname, personen.nachname, adressen.stadt
FROM personen
JOIN adressen ON personen.id = adressen.person_id;


------------------------------------------------------------
-- 1Ô∏è‚É£5Ô∏è‚É£  DISTINCT ‚Äì Doppelte Werte vermeiden
------------------------------------------------------------
SELECT DISTINCT nachname FROM personen;


------------------------------------------------------------
-- 1Ô∏è‚É£6Ô∏è‚É£  LIMIT ‚Äì Anzahl der Ergebnisse einschr√§nken
------------------------------------------------------------
SELECT * FROM personen LIMIT 2;  -- gibt nur 2 Zeilen zur√ºck
